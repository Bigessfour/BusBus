name: Safe Test Execution

on:
  workflow_dispatch:
    inputs:
      test_filter:
        description: 'Test filter (e.g., "TestCategory=MyCategory")'
        required: false
        default: ''
      timeout_minutes:
        description: 'Job timeout in minutes (default 10)'
        required: false
        default: '10' # Default is a string, GitHub Actions handles conversion for timeout-minutes
  push:
    branches: [ main, develop, maximize-dashboard ] # <-- ADDED 'maximize-dashboard' HERE
  pull_request:
    branches: [ main ]

jobs:
  safe-tests:
    runs-on: self-hosted # Ensure your self-hosted runner is available and correctly tagged
    timeout-minutes: ${{ github.event.inputs.timeout_minutes || 10 }} # Job-level timeout with default

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x' # Adjust if you use a different .NET version

    - name: Kill any existing processes before tests
      shell: bash
      run: |
        echo "Attempting to kill existing test-related processes..."
        pkill -f "dotnet" || true
        pkill -f "testhost" || true
        pkill -f "vstest" || true        echo "Process kill attempt finished. Waiting a moment..."
        sleep 3

    - name: Restore .NET dependencies
      shell: bash
      run: dotnet restore BusBus.sln

    - name: Build solution
      shell: bash
      run: dotnet build BusBus.sln --no-restore --configuration Release

    - name: Run tests with timeout
      shell: bash
      run: |
        echo "Running tests with 8 minute timeout..."
        
        # Set test filter if provided
        FILTER_ARG=""
        if [ -n "${{ github.event.inputs.test_filter }}" ]; then
          FILTER_ARG="--filter \"${{ github.event.inputs.test_filter }}\""
        fi
          # Run tests with timeout (8 minutes = 480 seconds, allowing 2 min buffer from job timeout)
        timeout 480s dotnet test BusBus.sln --logger "console;verbosity=normal" --no-build $FILTER_ARG || {
          echo "Tests timed out or failed"
          exit 1
        }

    - name: Final Cleanup Processes (always runs)
      if: always() # Ensures this step runs even if previous steps fail or are cancelled
      shell: bash
      run: |
        echo "Performing final cleanup of any remaining test-related processes..."
        pkill -f "dotnet" || true
        pkill -f "testhost" || true
        pkill -f "vstest" || true
        echo "Final cleanup attempt finished."
