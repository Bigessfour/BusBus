name: Safe Test Execution

on:
  workflow_dispatch:
    inputs:
      test_filter:
        description: 'Test filter (e.g., "TestCategory=MyCategory")'
        required: false
        default: ''
      timeout_minutes:
        description: 'Job timeout in minutes (default 10)'
        required: false
        default: '10'

jobs:
  safe-tests:
    runs-on: self-hosted
    timeout-minutes: ${{ github.event.inputs.timeout_minutes }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Kill any existing processes before tests
      shell: powershell
      run: |
        Write-Host "Attempting to kill existing test-related processes..."
        Get-Process -Name "dotnet*","testhost*","vstest*" -ErrorAction SilentlyContinue | Stop-Process -Force -ErrorAction SilentlyContinue
        Write-Host "Process kill attempt finished. Waiting a moment..."
        Start-Sleep -Seconds 3

    - name: Restore .NET dependencies
      run: dotnet restore BusBus.sln

    - name: Build solution
      run: dotnet build BusBus.sln --no-restore --configuration Release

    - name: Run tests with script-level timeout
      shell: powershell
      run: |
        $ErrorActionPreference = "Stop"

        $testFilterInput = "${{ github.event.inputs.test_filter }}"
        $filterArg = ""
        if ($null -ne $testFilterInput -and $testFilterInput.Trim() -ne "") {
          $filterArg = "--filter `"$($testFilterInput.Replace('"', '\"'))`""
        }

        # Calculate script's internal timeout to be less than the job's timeout
        $jobTimeoutMinutes = 10
        if ($env:INPUT_TIMEOUT_MINUTES -match '^\d+$') {
            $jobTimeoutMinutes = [int]$env:INPUT_TIMEOUT_MINUTES
        } elseif ("${{ github.event.inputs.timeout_minutes }}" -match '^\d+$') {
            $jobTimeoutMinutes = [int]"${{ github.event.inputs.timeout_minutes }}"
        }

        $scriptInternalTimeoutMinutes = $jobTimeoutMinutes - 2
        if ($scriptInternalTimeoutMinutes -lt 1) {
            $scriptInternalTimeoutMinutes = 1
        }
        $scriptInternalTimeoutSeconds = $scriptInternalTimeoutMinutes * 60

        Write-Host "Running tests. Job timeout: $jobTimeoutMinutes min. Script internal timeout for test process: $scriptInternalTimeoutMinutes min."
        Write-Host "Test Filter Argument: $filterArg"

        $cmd = "dotnet test BusBus.sln --logger:`"console;verbosity=normal`" --no-build $filterArg"
        Write-Host "Executing: $cmd"

        $job = Start-Job -ScriptBlock { param($c) Invoke-Expression $c } -ArgumentList $cmd
        $finished = Wait-Job $job -Timeout $scriptInternalTimeoutSeconds

        if (-not $finished) {
          Write-Host "ERROR: Tests exceeded script's internal timeout of $scriptInternalTimeoutMinutes minutes. Stopping job..." -ForegroundColor Red
          Stop-Job $job
          Remove-Job $job
          # Emergency cleanup for any orphaned testhosts or dotnet processes
          Get-Process -Name "dotnet*","testhost*","vstest*" -ErrorAction SilentlyContinue | Stop-Process -Force -ErrorAction SilentlyContinue
          exit 1
        }

        $output = Receive-Job $job
        Write-Output $output
        $exitCode = (Get-Job $job).ChildJobs[0].JobStateInfo.Reason.ExitCode
        Remove-Job $job

        if ($exitCode -ne 0) {
          Write-Host "Tests failed with Exit Code: $exitCode." -ForegroundColor Red
        }
        exit $exitCode

    - name: Final Cleanup Processes (always runs)
      if: always()
      shell: powershell
      run: |
        Write-Host "Performing final cleanup of any remaining test-related processes..."
        Get-Process -Name "dotnet*","testhost*","vstest*" -ErrorAction SilentlyContinue | Stop-Process -Force -ErrorAction SilentlyContinue
        Write-Host "Final cleanup attempt finished."
