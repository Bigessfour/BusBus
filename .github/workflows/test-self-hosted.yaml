name: BusBus Test Suite (Self-Hosted)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '8.0.x'
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true

jobs:
  test:
    runs-on: self-hosted  # This tells GitHub to use your self-hosted runner
    permissions:
      contents: read
      actions: read
      checks: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          cache: true

      - name: Restore dependencies
        run: dotnet restore BusBus.sln --verbosity normal

      - name: Build solution
        run: dotnet build BusBus.sln --configuration Release --no-restore

      - name: Run tests with coverage
        id: test-step
        run: |
          dotnet test BusBus.sln --no-build --configuration Release --collect:"XPlat Code Coverage" --results-directory TestResults --logger "trx;LogFileName=test-results.trx" --verbosity normal
        continue-on-error: true

      - name: Process test results
        id: process-results
        run: |
          $testResultsPath = "TestResults"
          $trxFiles = Get-ChildItem -Path $testResultsPath -Filter "*.trx" -Recurse
          $coverageFiles = Get-ChildItem -Path $testResultsPath -Filter "coverage.cobertura.xml" -Recurse

          Write-Host "Found TRX files: $($trxFiles.Count)"
          Write-Host "Found coverage files: $($coverageFiles.Count)"

          if ($trxFiles.Count -eq 0) {
            Write-Host "No test result files found"
            echo "test-results-found=false" >> $env:GITHUB_OUTPUT
          } else {
            echo "test-results-found=true" >> $env:GITHUB_OUTPUT
            echo "trx-file=$($trxFiles[0].FullName)" >> $env:GITHUB_OUTPUT
          }

          if ($coverageFiles.Count -gt 0) {
            echo "coverage-file=$($coverageFiles[0].FullName)" >> $env:GITHUB_OUTPUT
          }

      - name: Publish test results
        uses: dorny/test-reporter@v1
        if: steps.process-results.outputs.test-results-found == 'true'
        with:
          name: .NET Tests
          path: ${{ steps.process-results.outputs.trx-file }}
          reporter: dotnet-trx
          fail-on-error: true

      - name: Code Coverage Summary
        uses: irongut/CodeCoverageSummary@v1.3.0
        if: steps.process-results.outputs.coverage-file
        with:
          filename: ${{ steps.process-results.outputs.coverage-file }}
          badge: true
          fail_below_min: false
          format: markdown
          hide_branch_rate: false
          hide_complexity: false
          indicators: true
          output: both
          thresholds: '60 80'

      - name: Add Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request' && steps.process-results.outputs.coverage-file
        with:
          recreate: true
          path: code-coverage-results.md

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: TestResults/
          retention-days: 30

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: steps.process-results.outputs.coverage-file
        with:
          name: coverage-reports
          path: ${{ steps.process-results.outputs.coverage-file }}
          retention-days: 30
