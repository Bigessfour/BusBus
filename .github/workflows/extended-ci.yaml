# GitHub Actions workflow for BusBus Extended CI
name: BusBus Extended CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  # Add scheduled runs to make sure your repository is always being tested
  schedule:
    - cron: '0 0 * * 0' # Run once a week on Sunday at midnight

jobs:
  build-and-test:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Fetch all history for proper versioning

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore

    - name: Test with coverage
      run: dotnet test --no-build --collect:"XPlat Code Coverage" --settings ./CodeCoverage.runsettings --results-directory TestResults/Coverage /p:Threshold=80
      continue-on-error: false

    - name: Check coverage threshold
      run: |
        $coverageFiles = Get-ChildItem -Path TestResults/Coverage -Filter coverage.cobertura.xml -Recurse
        foreach ($file in $coverageFiles) {
          $xml = [xml](Get-Content $file)
          $lineRate = [float]$xml.coverage.'line-rate' * 100
          if ($lineRate -lt 80) {
            Write-Error "Coverage ($lineRate%) is below threshold of 80%"
            exit 1
          }
          Write-Host "Current code coverage: $lineRate%"
        }
      shell: pwsh

    - name: Generate coverage report
      run: |
        dotnet tool install -g dotnet-reportgenerator-globaltool
        reportgenerator -reports:TestResults/Coverage/**/coverage.cobertura.xml -targetdir:TestResults/Coverage/Report -reporttypes:Html

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: TestResults/Coverage/Report
        
    # Add static code analysis with StyleCop
    - name: Install StyleCop
      run: dotnet tool install -g dotnet-format
      
    - name: Check code style
      run: dotnet format --verify-no-changes --verbosity diagnostic
      continue-on-error: true # Don't fail the build but report issues
      
    # Add automatic release creation on tag
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
        
    # Publish the app as an artifact
    - name: Publish Windows application
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        dotnet publish BusBus.csproj -c Release -r win-x64 --self-contained -p:PublishSingleFile=true -p:IncludeNativeLibrariesForSelfExtract=true -o publish
        
    - name: Upload build artifacts
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v4
      with:
        name: BusBus-windows-app
        path: publish
