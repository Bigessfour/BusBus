#nullable enable
using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;
using BusBus.Services;
using BusBus.UI.Common;
using BusBus.Utils;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;

#pragma warning disable CA1848 // Use LoggerMessage delegates for logging performance
#pragma warning disable CA2254 // LoggerMessage delegates for logging performance
#pragma warning disable CS8618 // Non-nullable field is uninitialized. Suppressed because fields are initialized in SetupLayout.

namespace BusBus.UI
{    /// <summary>
     /// Main application hub that manages navigation, state, and view lifecycle
     /// </summary>
    public partial class Dashboard : BaseForm, IApplicationHub
    {
        #region Fields
        private readonly IServiceProvider _serviceProvider;
        private readonly IRouteService _routeService;
        private readonly ILogger<Dashboard> _logger;
        private readonly Dictionary<string, IView> _viewCache = new();
        private readonly Stack<string> _navigationHistory = new();
        private readonly DashboardState _state = new();

        private TableLayoutPanel _mainLayout; private Panel _sidePanel;
        private Panel _contentPanel;
        private Panel _headerPanel;
        private StatusStrip _statusStrip;
        private ToolStripStatusLabel _statusLabel;
        private ToolStripProgressBar _progressBar;

        private IView? _currentView;
        private CancellationTokenSource _cancellationTokenSource = new();

        // New fields for enhanced functionality
        private Button? _sidebarToggleButton;
        private bool _sidebarCollapsed = false;
        private ToastNotificationManager? _toastManager;
        private const int SIDEBAR_COLLAPSED_WIDTH = 60;
        private const int SIDEBAR_EXPANDED_WIDTH = 250;
        #endregion

        #region Constructor
        public Dashboard(IServiceProvider serviceProvider, IRouteService routeService, ILogger<Dashboard> logger)
        {
            if (serviceProvider == null)
            {
                System.Diagnostics.Debug.WriteLine("[DEBUG] serviceProvider is null in Dashboard constructor");
                throw new ArgumentNullException(nameof(serviceProvider));
            }
            if (routeService == null)
            {
                System.Diagnostics.Debug.WriteLine("[DEBUG] routeService is null in Dashboard constructor!");
                System.Diagnostics.Debugger.Break();
                throw new ArgumentNullException(nameof(routeService));
            }
            if (logger == null)
            {
                System.Diagnostics.Debug.WriteLine("[DEBUG] logger is null in Dashboard constructor");
                throw new ArgumentNullException(nameof(logger));
            }

            _serviceProvider = serviceProvider;
            _routeService = routeService;
            _logger = logger;

            _logger.LogDebug("[DEBUG] Dashboard constructor called. serviceProvider: {ServiceProvider}, routeService: {RouteService}, logger: {Logger}", serviceProvider, routeService, logger);

            InitializeComponent();
            SetupLayout();
            RegisterViews();
            SubscribeToEvents();

            _logger.LogInformation("Dashboard initialized successfully");
            // pragma disables above
        }
        #endregion

        #region Layout Setup
        private void SetupLayout()
        {
            this.SuspendLayout();

            // Set form properties
            this.Text = "BusBus - Transport Management System";
            this.WindowState = FormWindowState.Maximized;
            this.MinimumSize = new Size(1024, 768);
            this.StartPosition = FormStartPosition.CenterScreen;

            // Enable keyboard shortcuts
            this.KeyPreview = true;
            this.KeyDown += Dashboard_KeyDown;            // Create main table layout
            _mainLayout = new TableLayoutPanel
            {
                Dock = DockStyle.Fill,
                RowCount = 3,
                ColumnCount = 2,
                CellBorderStyle = TableLayoutPanelCellBorderStyle.None,
                Padding = new Padding(0) // Remove default padding
            };

            // Configure layout proportions
            _mainLayout.RowStyles.Add(new RowStyle(SizeType.Absolute, 65)); // Header - slightly increased
            _mainLayout.RowStyles.Add(new RowStyle(SizeType.Percent, 100)); // Content
            _mainLayout.RowStyles.Add(new RowStyle(SizeType.Absolute, 28)); // Status - slightly increased

            _mainLayout.ColumnStyles.Add(new ColumnStyle(SizeType.Absolute, 250)); // Sidebar
            _mainLayout.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 100)); // Main content

            // Create panels
            CreateHeaderPanel();
            CreateSidePanel();
            CreateContentPanel();
            CreateStatusBar();

            // Add panels to layout
            _mainLayout.Controls.Add(_headerPanel, 0, 0);
            _mainLayout.SetColumnSpan(_headerPanel, 2);

            _mainLayout.Controls.Add(_sidePanel, 0, 1);
            _mainLayout.Controls.Add(_contentPanel, 1, 1);

            _mainLayout.Controls.Add(_statusStrip, 0, 2);
            _mainLayout.SetColumnSpan(_statusStrip, 2); this.Controls.Add(_mainLayout);

            // Initialize toast notification manager
            _toastManager = new ToastNotificationManager(this);

            this.ResumeLayout(false);
            this.PerformLayout();
        }
        private void CreateHeaderPanel()
        {
            _headerPanel = new Panel
            {
                Dock = DockStyle.Fill,
                Tag = "HeaderPanel",
                Height = 65  // Slightly increased for better spacing
            };

            // Apply industry-standard Material Design theming with elevation
            ThemeManager.CurrentTheme.StyleHeadlinePanel(_headerPanel);
            _headerPanel.BackColor = ThemeManager.CurrentTheme.GetElevatedBackground(4); // Material Design 4dp elevation for app bar

            // Add header content with WCAG AA compliant styling
            var titleLabel = new Label
            {
                Text = "BusBus Transport Management",
                Font = new Font("Segoe UI", 16F, FontStyle.Bold),
                ForeColor = ThemeManager.CurrentTheme.HeadlineText,
                Location = new Point(65, 18),  // Increased spacing from toggle button
                AutoSize = true,
                Padding = new Padding(2) // Add padding to prevent text from touching borders
            };

            // Apply high-quality text rendering
            titleLabel.Paint += (sender, e) =>
            {
                if (e.Graphics != null)
                {
                    e.Graphics.TextRenderingHint = System.Drawing.Text.TextRenderingHint.ClearTypeGridFit;
                    e.Graphics.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.AntiAlias;
                }
            };

            // Create sidebar toggle button with glassmorphism styling
            _sidebarToggleButton = new Button
            {
                Text = "☰",
                Size = new Size(45, 45),  // Slightly larger for better touch target
                Location = new Point(12, 10),
                FlatStyle = FlatStyle.Flat,
                Font = new Font("Segoe UI", 14.5F),  // Slightly larger font
                ForeColor = ThemeManager.CurrentTheme.ButtonText,
                BackColor = Color.Transparent,
                Padding = new Padding(0, 2, 0, 0)  // Adjust vertical alignment
            };

            // Apply button styling
            ThemeManager.CurrentTheme.StyleButton(_sidebarToggleButton);
            _sidebarToggleButton.FlatAppearance.BorderSize = 0;
            _sidebarToggleButton.Click += ToggleSidebar_Click;

            // Add theme toggle button (industry best practice: allow user theme choice)
            var themeToggleButton = new Button
            {
                Text = ThemeManager.CurrentTheme.Name == "Dark" ? "🌙" : "☀️",
                Size = new Size(45, 45),  // Slightly larger for better touch target
                Location = new Point(_headerPanel.Width - 65, 10),
                Anchor = AnchorStyles.Top | AnchorStyles.Right,
                FlatStyle = FlatStyle.Flat,
                Font = new Font("Segoe UI", 14.5F),  // Slightly larger font
                ForeColor = ThemeManager.CurrentTheme.ButtonText,
                BackColor = Color.Transparent,
                Padding = new Padding(0, 2, 0, 0)  // Adjust vertical alignment
            };

            ThemeManager.CurrentTheme.StyleButton(themeToggleButton);
            themeToggleButton.FlatAppearance.BorderSize = 0;
            themeToggleButton.Click += ToggleTheme_Click;

            _headerPanel.Controls.AddRange(new Control[] { _sidebarToggleButton, titleLabel, themeToggleButton });

            // Apply high-quality text rendering to the header panel
            _headerPanel.Paint += (sender, e) =>
            {
                if (e.Graphics != null)
                {
                    e.Graphics.TextRenderingHint = System.Drawing.Text.TextRenderingHint.ClearTypeGridFit;
                }
            };
        }

        private void ToggleSidebar_Click(object? sender, EventArgs e)
        {
            ToggleSidebar();
        }

        private void ToggleTheme_Click(object? sender, EventArgs e)
        {
            ToggleTheme();
        }
        private void CreateSidePanel()
        {
            _sidePanel = new Panel
            {
                Dock = DockStyle.Fill,
                Tag = "SidePanel",
                AutoScroll = true,
                Padding = new Padding(0, 15, 0, 15) // Increased vertical padding for better spacing
            };

            var navItems = new[]
            {
                new NavigationItem("🏠", "Today View", "dashboard", true) { Shortcut = Keys.Alt | Keys.D },
                new NavigationItem("🚌", "Routes", "routes") { Shortcut = Keys.Alt | Keys.R },
                new NavigationItem("👥", "Drivers", "drivers") { Shortcut = Keys.Alt | Keys.V },
                new NavigationItem("🚗", "Vehicles", "vehicles") { Shortcut = Keys.Alt | Keys.E },
                new NavigationItem("📊", "Reports", "reports") { Shortcut = Keys.Alt | Keys.P },
                new NavigationItem("⚙️", "Settings", "settings") { Shortcut = Keys.Alt | Keys.T }
            };

            // Use FlowLayoutPanel for better button management
            var buttonContainer = new FlowLayoutPanel
            {
                Dock = DockStyle.Fill,
                FlowDirection = FlowDirection.TopDown,
                AutoScroll = true,
                WrapContents = false,
                Padding = new Padding(15, 5, 15, 5) // Increased horizontal padding for better spacing
            };

            foreach (var item in navItems)
            {
                var navButton = CreateNavigationButton(item);
                navButton.Width = 210; // Fixed width for consistency
                buttonContainer.Controls.Add(navButton);
            }

            _sidePanel.Controls.Add(buttonContainer);

            // Apply high-quality text rendering to the side panel
            _sidePanel.Paint += (sender, e) =>
            {
                if (e.Graphics != null)
                {
                    e.Graphics.TextRenderingHint = System.Drawing.Text.TextRenderingHint.ClearTypeGridFit;
                }
            };
        }
        private Button CreateNavigationButton(NavigationItem item)
        {
            var button = new Button
            {
                Text = $"{item.Icon} {item.Text}",
                Size = new Size(210, 45), // Increased height for better touch targets and readability
                FlatStyle = FlatStyle.Flat,
                TextAlign = ContentAlignment.MiddleLeft,
                Font = new Font("Segoe UI", 10.5F), // Slightly larger font for better readability
                Tag = item.ViewName,
                Padding = new Padding(12, 0, 0, 0), // Increased left padding for better text spacing
                Margin = new Padding(0, 7, 0, 7), // Increased margin between buttons
                UseVisualStyleBackColor = false // Required for custom styling
            };

            // Add tooltip with shortcut
            if (item.Shortcut != Keys.None)
            {
                var toolTip = new ToolTip();
                toolTip.SetToolTip(button, $"{item.Text} ({GetShortcutText(item.Shortcut)})");
            }

            button.FlatAppearance.BorderSize = 0;

            // Add high-quality text rendering
            button.Paint += (s, e) =>
            {
                e.Graphics.TextRenderingHint = System.Drawing.Text.TextRenderingHint.ClearTypeGridFit;
                e.Graphics.PixelOffsetMode = System.Drawing.Drawing2D.PixelOffsetMode.HighQuality;
            };

            button.Click += async (s, e) => await NavigateToAsync(item.ViewName);

            if (item.IsDefault)
            {
                button.BackColor = ThemeManager.CurrentTheme.ButtonHoverBackground;
            }

            return button;
        }
        private void CreateContentPanel()
        {
            _contentPanel = new Panel
            {
                Dock = DockStyle.Fill,
                Tag = "ContentPanel",
                Padding = new Padding(30), // Increased padding for better text spacing
                AutoScroll = true // Ensure content can be scrolled if it's too large
            };

            // Apply high-quality text rendering to the content panel
            _contentPanel.Paint += (sender, e) =>
            {
                if (e.Graphics != null)
                {
                    e.Graphics.TextRenderingHint = System.Drawing.Text.TextRenderingHint.ClearTypeGridFit;
                    e.Graphics.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.AntiAlias;
                }
            };
        }
        private void CreateStatusBar()
        {
            _statusStrip = new StatusStrip
            {
                Tag = "StatusBar",
                SizingGrip = false // Remove the sizing grip in the corner
            };

            _statusLabel = new ToolStripStatusLabel
            {
                Text = "Ready",
                Spring = true,
                TextAlign = ContentAlignment.MiddleLeft,
                Font = new Font("Segoe UI", 9F), // Ensure readable font size
                Padding = new Padding(5, 0, 0, 0) // Add left padding for text
            };

            _progressBar = new ToolStripProgressBar
            {
                Width = 120,
                Visible = false,
                Style = ProgressBarStyle.Marquee,
                Margin = new Padding(5, 3, 5, 3) // Add margin around progress bar
            };

            var connectionLabel = new ToolStripStatusLabel
            {
                Text = "Connected",
                ForeColor = Color.Green
            };

            _statusStrip.Items.AddRange(new ToolStripItem[]
            {
                _statusLabel,
                _progressBar,
                new ToolStripSeparator(),
                connectionLabel
            });
        }
        }
        #endregion

        #region Navigation
        public async Task NavigateToAsync(string viewName)
        {
            if (viewName == null)
            {
                throw new ArgumentNullException(nameof(viewName));
            }

            try
            {
                _logger.LogInformation($"Navigating to view: {viewName}");

                ShowProgress($"Loading {viewName}...");

                // Save current view state
                if (_currentView != null)
                {
                    SaveViewState(_currentView);
                    await _currentView.DeactivateAsync();
                    _navigationHistory.Push(_currentView.ViewName);
                }

                // Get or create view
                var view = GetOrCreateView(viewName);
                if (view == null)
                {
                    _logger.LogWarning($"View not found: {viewName}");
                    ShowToast($"View '{viewName}' not found", NotificationType.Warning);
                    return;
                }

                // Load view
                _contentPanel.Controls.Clear();

                if (view.Control != null)
                {
                    view.Control.Dock = DockStyle.Fill;
                    _contentPanel.Controls.Add(view.Control);
                }

                // Restore view state
                RestoreViewState(view);

                // Activate view
                await view.ActivateAsync(_cancellationTokenSource.Token);
                _currentView = view;

                // Update UI
                UpdateNavigationButtons(viewName);
                UpdateTitle(view.Title);

                HideProgress();
                ShowToast($"{view.Title} loaded", NotificationType.Success);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, $"Error navigating to {viewName}");
                HideProgress();
                ShowToast($"Error loading {viewName}: {ex.Message}", NotificationType.Error);
            }
        }

        public async Task NavigateBackAsync()
        {
            if (_navigationHistory.Count > 0)
            {
                var previousView = _navigationHistory.Pop();
                await NavigateToAsync(previousView);
            }
        }

        private IView? GetOrCreateView(string viewName)
        {
            if (_viewCache.TryGetValue(viewName, out var cachedView))
            {
                return cachedView;
            }

            IView? view = viewName.ToLower() switch
            {
                "dashboard" => new DashboardView(_serviceProvider),
                "routes" => new RouteListView(_routeService),
                "drivers" => new DriverListView(_serviceProvider),
                "vehicles" => new VehicleListView(_serviceProvider),
                "reports" => new ReportsView(_serviceProvider),
                "settings" => new SettingsView(_serviceProvider),
                _ => null
            };

            if (view != null)
            {
                _viewCache[viewName] = view;
                view.NavigationRequested += OnViewNavigationRequested;
                view.StatusUpdated += OnViewStatusUpdated;
            }

            return view;
        }

        private void UpdateNavigationButtons(string activeView)
        {
            // Find the FlowLayoutPanel container first
            var flowPanel = _sidePanel.Controls.OfType<FlowLayoutPanel>().FirstOrDefault();
            if (flowPanel != null)
            {
                foreach (Control control in flowPanel.Controls)
                {
                    if (control is Button button && button.Tag is string viewName)
                    {
                        button.BackColor = viewName.Equals(activeView, StringComparison.OrdinalIgnoreCase)
                            ? ThemeManager.CurrentTheme.ButtonHoverBackground
                            : ThemeManager.CurrentTheme.SidePanelBackground;
                    }
                }
            }
        }

        private void UpdateTitle(string viewTitle)
        {
            this.Text = $"BusBus - {viewTitle}";
        }
        #endregion

        #region View Management
        private void RegisterViews()
        {
            // Pre-register critical views for faster initial load
            _viewCache["dashboard"] = new DashboardView(_serviceProvider);
            _viewCache["routes"] = new RouteListView(_routeService);
        }

        private void OnViewNavigationRequested(object? sender, NavigationEventArgs e)
        {
            _ = NavigateToAsync(e.ViewName);
        }

        private void OnViewStatusUpdated(object? sender, StatusEventArgs e)
        {
            // Use toast notifications instead of status bar for important messages
            if (e.Type == StatusType.Error || e.Type == StatusType.Warning)
            {
                ShowToast(e.Message, e.Type == StatusType.Error ? NotificationType.Error : NotificationType.Warning);
            }
            else
            {
                ShowStatus(e.Message, e.Type);
            }
        }
        #endregion

        #region Status Management
        public void ShowStatus(string message, StatusType type = StatusType.Info)
        {
            if (InvokeRequired)
            {
                Invoke(() => ShowStatus(message, type));
                return;
            }

            _statusLabel.Text = message;
            _statusLabel.ForeColor = type switch
            {
                StatusType.Success => Color.Green,
                StatusType.Warning => Color.Orange,
                StatusType.Error => Color.Red,
                _ => SystemColors.ControlText
            };

            _logger.LogInformation($"Status: {message} [{type}]");
            // pragma disables above
        }

        public void ShowProgress(string message)
        {
            if (InvokeRequired)
            {
                Invoke(() => ShowProgress(message));
                return;
            }

            _statusLabel.Text = message;
            _progressBar.Visible = true;
        }

        public void HideProgress()
        {
            if (InvokeRequired)
            {
                Invoke(() => HideProgress());
                return;
            }

            _progressBar.Visible = false;
        }

        public void UpdateStatusMessage(string message)
        {
            if (_statusLabel != null)
            {
                _statusLabel.Text = message;
            }
        }

        public void RefreshCurrentView()
        {
            // Refresh the current view implementation
            if (_contentPanel?.Controls.Count > 0)
            {
                var currentControl = _contentPanel.Controls[0];
                if (currentControl is IRefreshable refreshable)
                {
                    refreshable.Refresh();
                }
            }
        }
        #endregion

        #region Theme Management
        private void ToggleTheme()
        {
            var newTheme = ThemeManager.CurrentTheme.Name == "Dark" ? "Light" : "Dark";
            ThemeManager.SwitchTheme(newTheme);
            _state.CurrentTheme = newTheme;
            SaveState();
        }

        private void SubscribeToEvents()
        {
            ThemeManager.ThemeChanged += OnThemeChanged;
            this.FormClosing += OnFormClosing;
            this.Load += OnFormLoad;
        }

        private void OnThemeChanged(object? sender, EventArgs e)
        {
            // Update theme toggle button
            var themeButton = _headerPanel.Controls.OfType<Button>()
                .FirstOrDefault(b => b.Tag?.ToString() == "ThemeToggle");

            if (themeButton != null)
            {
                themeButton.Text = ThemeManager.CurrentTheme.Name == "Dark" ? "☀️" : "🌙";
            }
        }
        #endregion

        #region State Management
        private async void OnFormLoad(object? sender, EventArgs e)
        {
            LoadState();
            await NavigateToAsync(_state.LastView ?? "dashboard");
        }

        private async void OnFormClosing(object? sender, FormClosingEventArgs e)
        {
            SaveState();

            // Cleanup
            _cancellationTokenSource.Cancel();

            // Deactivate current view
            if (_currentView != null)
            {
                await _currentView.DeactivateAsync();
            }

            // Dispose all cached views
            foreach (var view in _viewCache.Values)
            {
                view.Dispose();
            }

            _cancellationTokenSource.Dispose();
        }

        private void LoadState()
        {
            // Load state from settings/file
            // For now, just use defaults
            _state.CurrentTheme = "Dark";
            _state.LastView = "dashboard";
        }

        private void SaveState()
        {
            _state.LastView = _currentView?.ViewName;
            _state.SidebarCollapsed = _sidebarCollapsed;
            // Save state to settings/file
        }

        private void SaveViewState(IView view)
        {
            if (view is IStatefulView statefulView)
            {
                var state = statefulView.GetState();
                if (state != null)
                {
                    _state.ViewStates[view.ViewName] = state;
                }
            }
        }

        private void RestoreViewState(IView view)
        {
            if (view is IStatefulView statefulView && _state.ViewStates.TryGetValue(view.ViewName, out var state))
            {
                statefulView.RestoreState(state);
            }
        }
        #endregion

        #region IApplicationHub Implementation
        public IServiceProvider ServiceProvider => _serviceProvider;

        public void ShowNotification(string message, NotificationType type)
        {
            ShowStatus(message, type switch
            {
                NotificationType.Success => StatusType.Success,
                NotificationType.Warning => StatusType.Warning,
                NotificationType.Error => StatusType.Error,
                _ => StatusType.Info
            });
        }

        public async Task<bool> ShowConfirmationAsync(string message, string title)
        {
            var result = MessageBox.Show(message, title, MessageBoxButtons.YesNo, MessageBoxIcon.Question);
            return await Task.FromResult(result == DialogResult.Yes);
        }

        public void ShowBusyIndicator(string message)
        {
            ShowProgress(message);
        }

        public void HideBusyIndicator()
        {
            HideProgress();
        }

        public void ShowToast(string message, NotificationType type)
        {
            _toastManager?.ShowToast(message, type);
        }
        #endregion

        #region Helper Classes
        private class NavigationItem
    {
        public string Icon { get; }
        public string Text { get; }
        public string ViewName { get; }
        public bool IsDefault { get; }
        public Keys Shortcut { get; set; } = Keys.None;

        public NavigationItem(string icon, string text, string viewName, bool isDefault = false)
        {
            Icon = icon;
            Text = text;
            ViewName = viewName;
            IsDefault = isDefault;
        }
    }

    private class DashboardState
    {
        public string? CurrentTheme { get; set; }
        public string? LastView { get; set; }
        public bool SidebarCollapsed { get; set; }
        public Dictionary<string, object> ViewStates { get; } = new();
        }
        #endregion

        #region New Enhancement Methods
        private void ToggleSidebar()
        {
            _sidebarCollapsed = !_sidebarCollapsed;

            if (_sidebarCollapsed)
            {
                _mainLayout.ColumnStyles[0] = new ColumnStyle(SizeType.Absolute, SIDEBAR_COLLAPSED_WIDTH);

                // Hide button text when collapsed
                var flowPanel = _sidePanel.Controls.OfType<FlowLayoutPanel>().FirstOrDefault();
                if (flowPanel != null)
                {
                    foreach (var button in flowPanel.Controls.OfType<Button>())
                    {
                        var item = button.Tag as string;
                        var navItem = GetNavigationItemByViewName(item);
                        if (navItem != null)
                        {
                            button.Text = navItem.Icon;
                            button.Width = 40;
                        }
                    }
                }
            }
            else
            {
                _mainLayout.ColumnStyles[0] = new ColumnStyle(SizeType.Absolute, SIDEBAR_EXPANDED_WIDTH);

                // Restore button text when expanded
                var flowPanel = _sidePanel.Controls.OfType<FlowLayoutPanel>().FirstOrDefault();
                if (flowPanel != null)
                {
                    foreach (var button in flowPanel.Controls.OfType<Button>())
                    {
                        var item = button.Tag as string;
                        var navItem = GetNavigationItemByViewName(item);
                        if (navItem != null)
                        {
                            button.Text = $"{navItem.Icon} {navItem.Text}";
                            button.Width = 210;
                        }
                    }
                }
            }

            SaveState();
        }

        private static NavigationItem? GetNavigationItemByViewName(string? viewName)
        {
            if (viewName == null) return null;

            var navItems = new[]
            {
                new NavigationItem("🏠", "Dashboard", "dashboard", true),
                new NavigationItem("🚌", "Routes", "routes"),
                new NavigationItem("👥", "Drivers", "drivers"),
                new NavigationItem("🚗", "Vehicles", "vehicles"),
                new NavigationItem("📊", "Reports", "reports"),
                new NavigationItem("⚙️", "Settings", "settings")
            };

            return navItems.FirstOrDefault(n => n.ViewName == viewName);
        }

        private void Dashboard_KeyDown(object? sender, KeyEventArgs e)
        {
            // Handle keyboard shortcuts
            if (e.Alt)
            {
                switch (e.KeyCode)
                {
                    case Keys.S:
                        ToggleSidebar();
                        e.Handled = true;
                        break;
                    case Keys.D:
                        _ = NavigateToAsync("dashboard");
                        e.Handled = true;
                        break;
                    case Keys.R:
                        _ = NavigateToAsync("routes");
                        e.Handled = true;
                        break;
                    case Keys.V:
                        _ = NavigateToAsync("drivers");
                        e.Handled = true;
                        break;
                    case Keys.E:
                        _ = NavigateToAsync("vehicles");
                        e.Handled = true;
                        break;
                    case Keys.P:
                        _ = NavigateToAsync("reports");
                        e.Handled = true;
                        break;
                    case Keys.T:
                        _ = NavigateToAsync("settings");
                        e.Handled = true;
                        break;
                }
            }
        }

        private static string GetShortcutText(Keys keys)
        {
            var parts = new List<string>();
            if ((keys & Keys.Alt) == Keys.Alt) parts.Add("Alt");
            if ((keys & Keys.Control) == Keys.Control) parts.Add("Ctrl");
            if ((keys & Keys.Shift) == Keys.Shift) parts.Add("Shift");

            var keyCode = keys & Keys.KeyCode;
            if (keyCode != Keys.None)
                parts.Add(keyCode.ToString());

            return string.Join("+", parts);
        }
        #endregion

        private void InitializeComponent()
        {
            // This method is intentionally empty as all initialization
            // is handled in SetupLayout() for better organization
            this.SuspendLayout();
            this.AutoScaleMode = AutoScaleMode.Dpi;
            this.ResumeLayout(false);
        }

        protected override void OnLoad(EventArgs e)
        {
            base.OnLoad(e);

            // Apply high-quality text rendering to all controls
            ThemeManager.ApplyHighQualityTextRendering(this);

            // Ensure DPI awareness is properly configured
            if (Environment.OSVersion.Version.Major >= 10)
            {
                SetProcessDPIAware();
            }
        }

        [System.Runtime.InteropServices.DllImport("user32.dll")]
        private static extern bool SetProcessDPIAware();
    }

    #region Interfaces
    public interface IApplicationHub
{
    IServiceProvider ServiceProvider { get; }
    Task NavigateToAsync(string viewName);
    Task NavigateBackAsync();
    void ShowNotification(string message, NotificationType type);
    Task<bool> ShowConfirmationAsync(string message, string title);
    void ShowBusyIndicator(string message);
    void HideBusyIndicator();
    void ShowToast(string message, NotificationType type);
}

public interface IView : IDisposable
{
    string ViewName { get; }
    string Title { get; }
    Control? Control { get; }
    event EventHandler<NavigationEventArgs>? NavigationRequested;
    event EventHandler<StatusEventArgs>? StatusUpdated;
    Task ActivateAsync(CancellationToken cancellationToken);
    Task DeactivateAsync();
}

// New interface for stateful views
public interface IStatefulView
{
    object? GetState();
    void RestoreState(object state);
}

public class NavigationEventArgs : EventArgs
{
    public string ViewName { get; }
    public object? Parameter { get; }

    public NavigationEventArgs(string viewName, object? parameter = null)
    {
        ViewName = viewName;
        Parameter = parameter;
    }
}

public class StatusEventArgs : EventArgs
{
    public string Message { get; }
    public StatusType Type { get; }

    public StatusEventArgs(string message, StatusType type = StatusType.Info)
    {
        Message = message;
        Type = type;
    }
}

public enum StatusType
{
    Info,
    Success,
    Warning,
    Error
}

public enum NotificationType
{
    Info,
    Success,
    Warning,
    Error
}
    #endregion
}
