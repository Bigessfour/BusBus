{
	"version": "2.0.0",
	"tasks": [
		{
			"label": "Reset GitHub Integration",
			"type": "shell",
			"command": "powershell",
			"args": [
				"-Command",
				"Write-Host 'Resetting GitHub Integration...' -ForegroundColor Cyan; $ghPath = \"$env:APPDATA\\Code\\User\\globalStorage\\github.vscode-pull-request-github\"; if (Test-Path $ghPath) { Get-ChildItem $ghPath | ForEach-Object { Write-Host \"Found: $($_.Name)\" -ForegroundColor Yellow }; $statePath = Join-Path $ghPath 'state.vscgithub'; if (Test-Path $statePath) { Write-Host \"Removing state file...\" -ForegroundColor Yellow; Remove-Item $statePath -Force; Write-Host \"Done! Please reload VS Code window and try GitHub sign-in again.\" -ForegroundColor Green } else { Write-Host \"No state file found. Please try signing in to GitHub.\" -ForegroundColor Yellow } } else { Write-Host \"GitHub extension storage not found.\" -ForegroundColor Red }"
			],
			"group": "none",
			"presentation": {
				"reveal": "always",
				"panel": "new"
			}
		},
		{
			"type": "shell",
			"label": "build BusBus solution",
			"command": "dotnet",
			"args": [
				"build",
				"BusBus.sln"
			],
			"group": "build",
			"problemMatcher": [
				"$msCompile"
			]
		},
		{
			"label": "test with coverage",
			"command": "dotnet",
			"type": "process",
			"args": [
				"test",
				"/p:CollectCoverage=true",
				"/p:CoverletOutputFormat=cobertura"
			],
			"problemMatcher": "$msCompile",
			"group": "test"
		},
		{
			"label": "generate coverage report",
			"command": "reportgenerator",
			"type": "process",
			"args": [
				"-reports:${workspaceFolder}/BusBus.Tests/coverage.cobertura.xml",
				"-targetdir:${workspaceFolder}/CoverageReport",
				"-reporttypes:Html"
			],
			"problemMatcher": []
		},
		{
			"label": "test with coverage and report",
			"dependsOrder": "sequence",
			"dependsOn": [
				"test with coverage",
				"generate coverage report"
			],
			"group": {
				"kind": "test",
				"isDefault": true
			},
			"problemMatcher": []
		},
		{
			"label": "Run tests with coverage and open report",
			"type": "shell",
			"command": "powershell",
			"args": [
				"-Command",
				"Write-Host 'Checking if PowerShell is available...' -ForegroundColor Cyan; Write-Host 'PowerShell version:' -ForegroundColor Green; $PSVersionTable.PSVersion; Write-Host 'Running tests with coverage...' -ForegroundColor Cyan; dotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=./TestResults/Coverage/; if ($?) { Write-Host 'Generating coverage report...' -ForegroundColor Cyan; reportgenerator -reports:./TestResults/Coverage/coverage.cobertura.xml -targetdir:./TestResults/Coverage/Report -reporttypes:Html; if ($?) { Write-Host 'Opening coverage report...' -ForegroundColor Green; Start-Process (Resolve-Path ./TestResults/Coverage/Report/index.html) } else { Write-Host 'Failed to generate coverage report' -ForegroundColor Red } } else { Write-Host 'Tests failed or coverage data was not generated' -ForegroundColor Red }; Write-Host 'Press any key to continue...' -ForegroundColor Yellow; $null = $Host.UI.RawUI.ReadKey('NoEcho,IncludeKeyDown')"
			],
			"group": "test",
			"presentation": {
				"reveal": "always",
				"panel": "dedicated",
				"clear": true
			},
			"problemMatcher": []
		},
		{
			"label": "OmniSharp check Dashboard.cs",
			"type": "shell",
			"command": "powershell",
			"args": [
				"-Command",
				"Write-Host 'Triggering OmniSharp analysis on Dashboard.cs'; Copy-Item -Path 'c:/Users/steve.mckitrick/Desktop/BusBus/UI/Dashboard.cs' -Destination 'c:/Users/steve.mckitrick/Desktop/BusBus/UI/Dashboard.cs.tmp'; Move-Item -Path 'c:/Users/steve.mckitrick/Desktop/BusBus/UI/Dashboard.cs.tmp' -Destination 'c:/Users/steve.mckitrick/Desktop/BusBus/UI/Dashboard.cs' -Force"
			],
			"problemMatcher": "$msCompile",
			"presentation": {
				"reveal": "always",
				"panel": "new",
				"clear": true
			}
		},
		{
			"label": "Show OmniSharp Log",
			"type": "shell",
			"command": "powershell",
			"args": [
				"-Command",
				"if (Test-Path 'C:/Users/steve.mckitrick/Desktop/BusBus/omnisharp.log') { Get-Content 'C:/Users/steve.mckitrick/Desktop/BusBus/omnisharp.log' -Tail 100 } else { Write-Host 'OmniSharp log file not found' -ForegroundColor Red }"
			],
			"presentation": {
				"reveal": "always",
				"panel": "dedicated",
				"clear": true
			}
		},
		{
			"label": "Run all tests and generate coverage report",
			"dependsOn": [
				"test with coverage",
				"generate coverage report"
			],
			"dependsOrder": "sequence",
			"problemMatcher": []
		},
		{
			"label": "analyze Dashboard.cs",
			"command": "dotnet",
			"type": "process",
			"args": [
				"build",
				"BusBus.csproj",
				"/p:GenerateFullPaths=true"
			],
			"problemMatcher": "$msCompile",
			"group": "test",
			"presentation": {
				"reveal": "always",
				"panel": "new"
			},
			"dependsOn": [
				"build BusBus solution"
			]
		},
		{
			"label": "View OmniSharp Log File",
			"type": "shell",
			"command": "powershell",
			"args": [
				"-Command",
				"if (Test-Path 'C:/Users/steve.mckitrick/Desktop/BusBus/omnisharp.log') { notepad 'C:/Users/steve.mckitrick/Desktop/BusBus/omnisharp.log' } else { Write-Host 'Log file not found. Checking for logs in VS Code directory...' -ForegroundColor Yellow; $logDir = 'C:/Users/steve.mckitrick/AppData/Roaming/Code/logs'; if (Test-Path $logDir) { Get-ChildItem $logDir -Recurse -Filter '*omnisharp*' | Select-Object -First 1 | ForEach-Object { notepad $_.FullName } } else { Write-Host 'No OmniSharp logs found.' -ForegroundColor Red } }"
			],
			"presentation": {
				"reveal": "always",
				"panel": "new",
				"clear": true
			},
			"problemMatcher": []
		},
		{
			"label": "Restart OmniSharp",
			"type": "shell",
			"command": "echo",
			"args": [
				"Restarting OmniSharp... Please use Command Palette (Ctrl+Shift+P) and type 'OmniSharp: Restart OmniSharp'"
			],
			"presentation": {
				"reveal": "always",
				"panel": "new"
			},
			"problemMatcher": []
		},
		{
			"label": "Check C# Extensions",
			"type": "shell",
			"command": "powershell",
			"args": [
				"-Command",
				"Write-Host 'Checking for C# extensions in VS Code...' -ForegroundColor Cyan; Write-Host '1. Please check that you have the C# extension installed:' -ForegroundColor Yellow; Write-Host '   - Press Ctrl+Shift+X to open Extensions panel' -ForegroundColor White; Write-Host '   - Search for \"C#\" or \"C# Dev Kit\"' -ForegroundColor White; Write-Host '   - Make sure it is installed and enabled' -ForegroundColor White; Write-Host '2. If extension is installed but not working, try:' -ForegroundColor Yellow; Write-Host '   - Press Ctrl+Shift+P and type \"Developer: Reload Window\"' -ForegroundColor White; Write-Host '   - Restart VS Code completely' -ForegroundColor White; Write-Host '3. Newer versions use \"C# Dev Kit\" instead of \"OmniSharp\"' -ForegroundColor Yellow"
			],
			"presentation": {
				"reveal": "always",
				"panel": "new",
				"clear": true
			},
			"problemMatcher": []
		},
		{
			"label": "Check if OmniSharp is loaded",
			"type": "process",
			"command": "C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe",
			"args": [
				"-NoProfile",
				"-ExecutionPolicy",
				"Bypass",
				"-Command",
				"$omnisharpProcess = Get-Process | Where-Object { $_.ProcessName -like '*omnisharp*' -or $_.ProcessName -like '*dotnetls*' -or $_.ProcessName -like '*razor*' }; if ($omnisharpProcess) { Write-Host 'OmniSharp/C# language service is RUNNING:' -ForegroundColor Green; $omnisharpProcess | Format-Table Id, ProcessName, StartTime -AutoSize } else { Write-Host 'OmniSharp is NOT running!' -ForegroundColor Red }"
			],
			"presentation": {
				"reveal": "always",
				"panel": "new",
				"clear": true
			},
			"problemMatcher": []
		},
		{
			"label": "open coverage report",
			"type": "shell",
			"command": "start",
			"windows": {
				"command": "start"
			},
			"osx": {
				"command": "open"
			},
			"linux": {
				"command": "xdg-open"
			},
			"args": [
				"${workspaceFolder}/CoverageReport/index.html"
			],
			"problemMatcher": []
		},
		{
			"label": "Ensure ReportGenerator is installed",
			"type": "shell",
			"command": "powershell",
			"args": [
				"-Command",
				"Write-Host 'Checking if ReportGenerator is installed...' -ForegroundColor Cyan; if (Get-Command reportgenerator -ErrorAction SilentlyContinue) { Write-Host 'ReportGenerator is already installed!' -ForegroundColor Green } else { Write-Host 'Installing ReportGenerator...' -ForegroundColor Yellow; dotnet tool install -g dotnet-reportgenerator-globaltool --ignore-failed-sources; if ($?) { Write-Host 'ReportGenerator has been installed successfully!' -ForegroundColor Green } else { Write-Host 'Failed to install ReportGenerator. Please install it manually with:' -ForegroundColor Red; Write-Host 'dotnet tool install -g dotnet-reportgenerator-globaltool' -ForegroundColor Red } }; Write-Host 'Press any key to continue...' -ForegroundColor Yellow; $null = $Host.UI.RawUI.ReadKey('NoEcho,IncludeKeyDown')"
			],
			"presentation": {
				"reveal": "always",
				"panel": "shared",
				"clear": true
			},
			"problemMatcher": []
		},
		{
			"label": "test",
			"command": "dotnet",
			"type": "process",
			"args": [
				"test"
			],
			"problemMatcher": "$msCompile",
			"group": {
				"kind": "test",
				"isDefault": true
			}
		},
		{
			"label": "Run Tests with Coverage",
			"command": "dotnet",
			"type": "process",
			"args": [
				"test",
				"/p:CollectCoverage=true",
				"/p:CoverletOutputFormat=cobertura"
			],
			"problemMatcher": "$msCompile",
			"group": "test"
		},
		{
			"label": "Generate Coverage Report",
			"command": "reportgenerator",
			"type": "process",
			"args": [
				"-reports:${workspaceFolder}/BusBus.Tests/coverage.cobertura.xml",
				"-targetdir:${workspaceFolder}/CoverageReport",
				"-reporttypes:Html"
			],
			"problemMatcher": []
		},
		{
			"label": "Run Tests and Generate Report",
			"dependsOrder": "sequence",
			"dependsOn": [
				"Run Tests with Coverage",
				"Generate Coverage Report"
			],
			"group": {
				"kind": "test",
				"isDefault": true
			},
			"problemMatcher": []
		},
		{
			"label": "Open Coverage Report",
			"type": "shell",
			"command": "cmd.exe",
			"args": [
				"/c",
				"start",
				"\"\"",
				"\"${workspaceFolder}\\open-coverage-report.html\""
			],
			"presentation": {
				"reveal": "always",
				"panel": "shared",
				"clear": true
			},
			"problemMatcher": []
		},
		{
			"label": "Generate and Open Coverage Report",
			"type": "shell",
			"command": "cmd.exe",
			"args": [
				"/c",
				"reportgenerator -reports:${workspaceFolder}/BusBus.Tests/coverage.cobertura.xml -targetdir:${workspaceFolder}/CoverageReport -reporttypes:Html && timeout /t 2 > nul && start \"\" \"${workspaceFolder}\\open-coverage-report.html\""
			],
			"presentation": {
				"reveal": "always",
				"panel": "shared",
				"clear": true
			},
			"problemMatcher": []
		},
		{
			"label": "Complete Test Coverage Workflow",
			"dependsOrder": "sequence",
			"dependsOn": [
				"Run Tests with Coverage",
				"Generate Coverage Report",
				"Open Coverage Report"
			],
			"group": {
				"kind": "test",
				"isDefault": true
			},
			"problemMatcher": []
		},
		{
			"label": "View Coverage in VS Code Browser",
			"type": "shell",
			"command": "${command:simpleBrowser.show}",
			"args": [
				"${workspaceFolder}/CoverageReport/index.html"
			],
			"problemMatcher": []
		},
		{
			"label": "Open Testing Guide",
			"type": "shell",
			"command": "start",
			"args": [
				"${workspaceFolder}/docs/testing-guide.md"
			],
			"presentation": {
				"reveal": "never",
				"panel": "new"
			},
			"group": "test",
			"problemMatcher": []
		},
		{
			"label": "Create New Test",
			"type": "shell",
			"command": "powershell",
			"args": [
				"-Command",
				"Write-Host 'Starting new test creation workflow...' -ForegroundColor Cyan; Start-Process '${workspaceFolder}/docs/testing-guide.md'; $testName = Read-Host 'Enter the name of the class to test (without \"Tests\" suffix)'; $filename = \"${workspaceFolder}/BusBus.Tests/${testName}Tests.cs\"; if (!(Test-Path $filename)) { if (Test-Path \"${workspaceFolder}/docs/test-template.cs\") { $templateContent = Get-Content -Path '${workspaceFolder}/docs/test-template.cs' -Raw; $templateContent = $templateContent -replace '\\{ClassName\\}', $testName; Set-Content -Path $filename -Value $templateContent; Write-Host \"Created new test file at $filename\" -ForegroundColor Green; } else { Write-Host \"Creating basic test file for $testName...\" -ForegroundColor Yellow; $basicTemplate = @\"\nusing NUnit.Framework;\nusing System;\nusing System.Threading.Tasks;\n\nnamespace BusBus.Tests\n{\n    [TestFixture]\n    public class ${testName}Tests\n    {\n        [SetUp]\n        public void Setup()\n        {\n            // TODO: Setup test dependencies\n        }\n\n        [Test]\n        public void Test1()\n        {\n            // Arrange\n\n            // Act\n\n            // Assert\n            Assert.Pass(\"Test not yet implemented\");\n        }\n\n        [TearDown]\n        public void TearDown()\n        {\n            // TODO: Cleanup resources\n        }\n    }\n}\n\"@; Set-Content -Path $filename -Value $basicTemplate; Write-Host \"Created basic test file at $filename\" -ForegroundColor Green; } code $filename } else { Write-Host \"Test file already exists at $filename\" -ForegroundColor Yellow; code $filename }"
			],
			"group": "test",
			"presentation": {
				"reveal": "always",
				"panel": "new",
				"clear": true
			},
			"problemMatcher": []
		},
		{
			"label": "Prepare Test Context",
			"type": "shell",
			"command": "cmd.exe",
			"args": [
				"/c",
				"${workspaceFolder}\\prepare-test-context.cmd",
				"${input:classNameForTestContext}"
			],
			"group": "test",
			"presentation": {
				"reveal": "always",
				"panel": "dedicated",
				"clear": true
			},
			"problemMatcher": []
		}
	],
	"inputs": [
		{
			"id": "classNameForTestContext",
			"type": "promptString",
			"description": "Enter the name of the class to analyze (leave empty for general report)",
			"default": ""
		}
	]
}