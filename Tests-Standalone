using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Configuration;
using Microsoft.EntityFrameworkCore;
using BusBus.UI;
using BusBus.Models;
using BusBus.Services;
using BusBus.DataAccess;

namespace BusBus.Tests
{
    /// <summary>
    /// Standalone Dashboard Test Runner - Tests startup procedures and Route view functionality
    /// This can be run independently without MSTest framework
    /// </summary>
    public class DashboardStartupTest
    {
        private IServiceProvider? _serviceProvider;
        private Dashboard? _dashboard;
        private DashboardView? _dashboardView;
        private readonly List<string> _testResults = new();
        private readonly List<string> _errors = new();

        public static async Task Main(string[] args)
        {
            Console.WriteLine("=== BusBus Dashboard Startup Test ===");
            Console.WriteLine($"Started at: {DateTime.Now:yyyy-MM-dd HH:mm:ss}");
            Console.WriteLine();

            var test = new DashboardStartupTest();
            var success = await test.RunFullTestSuiteAsync();

            Console.WriteLine();
            Console.WriteLine("=== Test Results ===");
            foreach (var result in test._testResults)
            {
                Console.WriteLine($"✓ {result}");
            }

            if (test._errors.Any())
            {
                Console.WriteLine();
                Console.WriteLine("=== Errors ===");
                foreach (var error in test._errors)
                {
                    Console.WriteLine($"✗ {error}");
                }
            }

            Console.WriteLine();
            Console.WriteLine($"Test completed at: {DateTime.Now:yyyy-MM-dd HH:mm:ss}");
            Console.WriteLine($"Overall result: {(success ? "SUCCESS" : "FAILED")}");

            if (args.Contains("--wait"))
            {
                Console.WriteLine("Press any key to exit...");
                Console.ReadKey();
            }

            Environment.Exit(success ? 0 : 1);
        }

        public async Task<bool> RunFullTestSuiteAsync()
        {
            try
            {
                // Initialize Application and Services
                if (!await InitializeApplicationAsync())
                    return false;

                // Test Database Connection
                if (!await TestDatabaseConnectionAsync())
                    return false;

                // Test Service Resolution
                if (!TestServiceResolution())
                    return false;

                // Test Dashboard Creation
                if (!await TestDashboardCreationAsync())
                    return false;

                // Test DashboardView Creation and Initialization
                if (!await TestDashboardViewCreationAsync())
                    return false;

                // Test Route View Loading
                if (!await TestRouteViewLoadingAsync())
                    return false;

                // Test CRUD Operations
                if (!await TestCrudOperationsAsync())
                    return false;

                // Test UI Components
                if (!TestUIComponents())
                    return false;

                _testResults.Add("All tests passed successfully");
                return true;
            }
            catch (Exception ex)
            {
                _errors.Add($"Test suite failed with exception: {ex.Message}");
                return false;
            }
            finally
            {
                await CleanupAsync();
            }
        }

        private async Task<bool> InitializeApplicationAsync()
        {
            try
            {
                // Initialize Windows Forms application
                Application.EnableVisualStyles();
                Application.SetCompatibleTextRenderingDefault(false);

                // Build configuration
                var configuration = new ConfigurationBuilder()
                    .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
                    .AddJsonFile("appsettings.json", optional: true)
                    .AddJsonFile("appsettings.Development.json", optional: true)
                    .Build();

                // Build service collection
                var services = new ServiceCollection();
                
                // Add logging
                services.AddLogging(builder =>
                {
                    builder.AddConsole();
                    builder.SetMinimumLevel(LogLevel.Debug);
                });

                // Add configuration
                services.AddSingleton<IConfiguration>(configuration);

                // Add Entity Framework
                var connectionString = configuration.GetConnectionString("DefaultConnection") 
                    ?? "Server=localhost\\SQLEXPRESS;Database=BusBusDB;Trusted_Connection=true;TrustServerCertificate=true;";
                
                services.AddDbContext<AppDbContext>(options =>
                {
                    options.UseSqlServer(connectionString);
                    options.EnableSensitiveDataLogging();
                    options.EnableDetailedErrors();
                });

                // Add application services
                services.AddScoped<IRouteService, RouteService>();
                services.AddScoped<IDriverService, DriverService>();
                services.AddScoped<IVehicleService, VehicleService>();

                // Add UI components
                services.AddTransient<Dashboard>();
                services.AddTransient<DashboardView>();

                _serviceProvider = services.BuildServiceProvider();
                
                _testResults.Add("Application initialized successfully");
                return true;
            }
            catch (Exception ex)
            {
                _errors.Add($"Application initialization failed: {ex.Message}");
                return false;
            }
        }

        private async Task<bool> TestDatabaseConnectionAsync()
        {
            try
            {
                using var scope = _serviceProvider!.CreateScope();
                var dbContext = scope.ServiceProvider.GetRequiredService<AppDbContext>();
                
                // Test basic connection
                await dbContext.Database.CanConnectAsync();
                _testResults.Add("Database connection successful");

                // Test data access
                var routeCount = await dbContext.Routes.CountAsync();
                var driverCount = await dbContext.Drivers.CountAsync();
                var vehicleCount = await dbContext.Vehicles.CountAsync();

                _testResults.Add($"Database contains: {routeCount} routes, {driverCount} drivers, {vehicleCount} vehicles");
                return true;
            }
            catch (Exception ex)
            {
                _errors.Add($"Database connection failed: {ex.Message}");
                return false;
            }
        }

        private bool TestServiceResolution()
        {
            try
            {
                using var scope = _serviceProvider!.CreateScope();
                
                var routeService = scope.ServiceProvider.GetRequiredService<IRouteService>();
                var driverService = scope.ServiceProvider.GetRequiredService<IDriverService>();
                var vehicleService = scope.ServiceProvider.GetRequiredService<IVehicleService>();

                if (routeService == null || driverService == null || vehicleService == null)
                {
                    _errors.Add("One or more services failed to resolve");
                    return false;
                }

                _testResults.Add("All services resolved successfully");
                return true;
            }
            catch (Exception ex)
            {
                _errors.Add($"Service resolution failed: {ex.Message}");
                return false;
            }
        }

        private async Task<bool> TestDashboardCreationAsync()
        {
            try
            {
                // Create dashboard on UI thread
                var tcs = new TaskCompletionSource<bool>();
                
                var thread = new Thread(() =>
                {
                    try
                    {
                        Application.SetCompatibleTextRenderingDefault(false);
                        
                        using var scope = _serviceProvider!.CreateScope();
                        var routeService = scope.ServiceProvider.GetRequiredService<IRouteService>();
                        var logger = scope.ServiceProvider.GetRequiredService<ILogger<Dashboard>>();
                        
                        _dashboard = new Dashboard(scope.ServiceProvider, routeService, logger);
                        
                        // Don't show the form, just test creation
                        if (_dashboard.IsHandleCreated || _dashboard.Handle != IntPtr.Zero)
                        {
                            tcs.SetResult(true);
                        }
                        else
                        {
                            tcs.SetResult(false);
                        }
                    }
                    catch (Exception ex)
                    {
                        tcs.SetException(ex);
                    }
                });

                thread.SetApartmentState(ApartmentState.STA);
                thread.Start();

                var result = await tcs.Task;
                if (result)
                {
                    _testResults.Add("Dashboard created successfully");
                    return true;
                }
                else
                {
                    _errors.Add("Dashboard creation failed - handle not created");
                    return false;
                }
            }
            catch (Exception ex)
            {
                _errors.Add($"Dashboard creation failed: {ex.Message}");
                return false;
            }
        }

        private async Task<bool> TestDashboardViewCreationAsync()
        {
            try
            {
                var tcs = new TaskCompletionSource<bool>();
                
                var thread = new Thread(() =>
                {
                    try
                    {
                        using var scope = _serviceProvider!.CreateScope();
                        _dashboardView = new DashboardView(scope.ServiceProvider);
                        
                        // Force handle creation
                        var handle = _dashboardView.Handle;
                        
                        // Wait for Load event to fire
                        _dashboardView.Load += (s, e) =>
                        {
                            // Give it a moment to fully initialize
                            var timer = new System.Windows.Forms.Timer();
                            timer.Interval = 500;
                            timer.Tick += (sender, args) =>
                            {
                                timer.Stop();
                                tcs.SetResult(true);
                            };
                            timer.Start();
                        };

                        // Trigger the Load event
                        _dashboardView.Show();
                        _dashboardView.Hide(); // Hide immediately after showing
                        
                        Application.DoEvents();
                    }
                    catch (Exception ex)
                    {
                        tcs.SetException(ex);
                    }
                });

                thread.SetApartmentState(ApartmentState.STA);
                thread.Start();

                var result = await tcs.Task;
                if (result)
                {
                    _testResults.Add("DashboardView created and initialized successfully");
                    return true;
                }
                else
                {
                    _errors.Add("DashboardView creation failed");
                    return false;
                }
            }
            catch (Exception ex)
            {
                _errors.Add($"DashboardView creation failed: {ex.Message}");
                return false;
            }
        }

        private async Task<bool> TestRouteViewLoadingAsync()
        {
            try
            {
                if (_dashboardView == null)
                {
                    _errors.Add("DashboardView not created - cannot test route view");
                    return false;
                }

                var tcs = new TaskCompletionSource<bool>();
                
                var thread = new Thread(async () =>
                {
                    try
                    {
                        // Wait a bit for initialization to complete
                        await Task.Delay(1000);
                        
                        // Check if route view is the default view and loaded
                        var routeGridFound = false;
                        var routeDataFound = false;

                        // Look for route data grid in the dashboard view
                        foreach (Control control in _dashboardView.Controls)
                        {
                            if (control is TableLayoutPanel mainLayout)
                            {
                                foreach (Control child in mainLayout.Controls)
                                {
                                    if (child is Panel contentPanel)
                                    {
                                        foreach (Control gridControl in contentPanel.Controls)
                                        {
                                            if (gridControl.Visible && gridControl.GetType().Name.Contains("DataGrid"))
                                            {
                                                routeGridFound = true;
                                                
                                                // Check if it has data (simplified check)
                                                if (gridControl is DataGridView dgv && dgv.RowCount > 0)
                                                {
                                                    routeDataFound = true;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        tcs.SetResult(routeGridFound);
                    }
                    catch (Exception ex)
                    {
                        tcs.SetException(ex);
                    }
                });

                thread.SetApartmentState(ApartmentState.STA);
                thread.Start();

                var result = await tcs.Task;
                if (result)
                {
                    _testResults.Add("Route view loaded successfully with data grid visible");
                    return true;
                }
                else
                {
                    _errors.Add("Route view failed to load or data grid not visible");
                    return false;
                }
            }
            catch (Exception ex)
            {
                _errors.Add($"Route view loading test failed: {ex.Message}");
                return false;
            }
        }

        private async Task<bool> TestCrudOperationsAsync()
        {
            try
            {
                using var scope = _serviceProvider!.CreateScope();
                var routeService = scope.ServiceProvider.GetRequiredService<IRouteService>();

                // Test Create
                var newRoute = new Route
                {
                    RouteName = "Test Route",
                    Date = DateOnly.FromDateTime(DateTime.Today),
                    BeginningMileage = 100,
                    EndingMileage = 150,
                    RidersUp = 25,
                    RidersDown = 25,
                    DriverId = null, // Will be set by service if needed
                    VehicleId = null // Will be set by service if needed
                };

                await routeService.CreateAsync(newRoute);
                _testResults.Add("CRUD Create operation successful");

                // Test Read
                var routes = await routeService.GetAllAsync();
                if (routes.Any(r => r.RouteName == "Test Route"))
                {
                    _testResults.Add("CRUD Read operation successful");
                }

                // Test Update
                var testRoute = routes.FirstOrDefault(r => r.RouteName == "Test Route");
                if (testRoute != null)
                {
                    testRoute.RidersUp = 30;
                    await routeService.UpdateAsync(testRoute);
                    _testResults.Add("CRUD Update operation successful");
                }

                // Test Delete
                if (testRoute != null)
                {
                    await routeService.DeleteAsync(testRoute.Id);
                    _testResults.Add("CRUD Delete operation successful");
                }

                return true;
            }
            catch (Exception ex)
            {
                _errors.Add($"CRUD operations test failed: {ex.Message}");
                return false;
            }
        }

        private bool TestUIComponents()
        {
            try
            {
                if (_dashboardView == null)
                {
                    _errors.Add("DashboardView not available for UI component testing");
                    return false;
                }

                var componentsFound = new List<string>();

                // Check for main layout components
                foreach (Control control in _dashboardView.Controls)
                {
                    if (control is TableLayoutPanel)
                    {
                        componentsFound.Add("Main TableLayoutPanel");
                        
                        foreach (Control child in control.Controls)
                        {
                            if (child is Panel panel)
                            {
                                if (panel.Dock == DockStyle.Left || panel.Width == 250)
                                    componentsFound.Add("Side Panel");
                                else if (panel.Dock == DockStyle.Fill)
                                    componentsFound.Add("Content Panel");
                                else if (panel.Height <= 120)
                                    componentsFound.Add("CRUD Panel or Stats Panel");
                            }
                        }
                    }
                }

                if (componentsFound.Count >= 4) // Expecting at least main layout, side panel, content panel, and one other
                {
                    _testResults.Add($"UI Components found: {string.Join(", ", componentsFound)}");
                    return true;
                }
                else
                {
                    _errors.Add($"Expected UI components not found. Found: {string.Join(", ", componentsFound)}");
                    return false;
                }
            }
            catch (Exception ex)
            {
                _errors.Add($"UI components test failed: {ex.Message}");
                return false;
            }
        }

        private async Task CleanupAsync()
        {
            try
            {
                _dashboardView?.Dispose();
                _dashboard?.Dispose();
                
                if (_serviceProvider is IDisposable disposable)
                {
                    disposable.Dispose();
                }

                _testResults.Add("Cleanup completed successfully");
            }
            catch (Exception ex)
            {
                _errors.Add($"Cleanup failed: {ex.Message}");
            }
        }
    }
}
