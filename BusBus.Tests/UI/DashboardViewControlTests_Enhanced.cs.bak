#pragma warning disable CA1416 // Platform compatibility (WinForms)
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;
using BusBus.Models;
using BusBus.Services;
using BusBus.UI;
using FluentAssertions;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Moq;

namespace BusBus.Tests.UI
{
    /// <summary>
    /// Enhanced stress tests for DashboardView targeting UI issues:
    /// - Multiple competing forms in DashboardView
    /// - Null drivers view
    /// - Missing RoutesList controls
    /// - Disposal exceptions
    /// </summary>
    [TestClass]
    [TestCategory(TestCategories.UI)]
    public class DashboardViewControlTests : TestBase
    {
        private Mock<IRouteService> _mockRouteService;
        private Mock<ILogger<DashboardView>> _mockLogger;
        private ServiceProvider _serviceProvider;
        private List<string> _logMessages;

        [TestInitialize]
        public override async Task SetUp()
        {
            await base.SetUp();
            _logMessages = new List<string>();
            _mockRouteService = new Mock<IRouteService>();
            _mockLogger = new Mock<ILogger<DashboardView>>();

            // Capture log messages for analysis
            _mockLogger.Setup(l => l.Log(
                It.IsAny<LogLevel>(),
                It.IsAny<EventId>(),
                It.IsAny<It.IsAnyType>(),
                It.IsAny<Exception>(),
                It.IsAny<Func<It.IsAnyType, Exception?, string>>()))
                .Callback<LogLevel, EventId, object, Exception?, Func<object, Exception?, string>>(
                    (level, id, state, ex, formatter) => _logMessages.Add($"{level}: {formatter(state, ex)}"));

            var services = new ServiceCollection();
            services.AddSingleton(_mockRouteService.Object);
            services.AddSingleton(_mockLogger.Object);
            _serviceProvider = services.BuildServiceProvider();

            // Initialize WinForms if not already done
            if (Application.OpenForms.Count == 0)
            {
                Application.SetHighDpiMode(HighDpiMode.SystemAware);
                Application.EnableVisualStyles();
                Application.SetCompatibleTextRenderingDefault(false);
            }
        }

        [TestCleanup]
        public void CleanUp()
        {
            _serviceProvider?.Dispose();
        }

        [TestMethod]
        public async Task Constructor_CreatesValidInstance()
        {
            DashboardView view = null;
            Exception ex = null;
            await InvokeOnUIThread(() =>
            {
                try { view = new DashboardView(_serviceProvider); }
                catch (Exception e) { ex = e; }
            });

            ex.Should().BeNull("Constructor should not throw exceptions");
            view.Should().NotBeNull().And.BeAssignableTo<Control>("View should be a valid Control");
        }

        [TestMethod]
        public async Task AfterActivation_HasRequiredPanels()
        {
            var view = await CreateAndActivateView();

            view.Controls.Count.Should().BeGreaterThan(0, "Activated view should have controls");
            GetControlsOfType<TableLayoutPanel>(view).Should().NotBeEmpty("View should contain TableLayoutPanel controls");
        }

        [TestMethod]
        public async Task RoutesPanel_ExistsAndAccessible()
        {
            var view = await CreateAndActivateView();

            var routesPanels = FindControlsByName(view, "routes");
            var todaysRoutesControls = FindControlsByName(view, "today");

            GetControlsOfType<TableLayoutPanel>(view).Should().NotBeEmpty("Routes should be displayed in TableLayoutPanel");
            FindControlsWithRoutesTag(view).Should().NotBeEmpty("Controls should be tagged for routes functionality");
        }

        [TestMethod]
        public async Task TodaysRoutesPanel_ContainsTableLayoutPanel()
        {
            var view = await CreateAndActivateView();
            var todaysRoutesPanel = GetField<Panel>(view, "_todaysRoutesPanel");

            todaysRoutesPanel.Should().NotBeNull("_todaysRoutesPanel field should exist");

            if (todaysRoutesPanel != null)
            {
                // Look for TableLayoutPanel in the hierarchy (Panel -> ScrollPanel -> TableLayoutPanel)
                var tableLayoutPanels = GetControlsOfType<TableLayoutPanel>(todaysRoutesPanel);

                if (tableLayoutPanels.Length == 0)
                {
                    var controlTypes = todaysRoutesPanel.Controls.Cast<Control>()
                        .Select(c => $"{c.GetType().Name} (Name: {c.Name})")
                        .ToArray();

                    Assert.Fail($"No TableLayoutPanel found in _todaysRoutesPanel hierarchy. " +
                              $"Found direct controls: [{string.Join(", ", controlTypes)}]. " +
                              $"This addresses the 'Routes list control not found' error from logs.");
                }
                else
                {
                    tableLayoutPanels.Should().NotBeEmpty("_todaysRoutesPanel should contain TableLayoutPanel for routes list in its hierarchy");
                }
            }
        }

        [TestMethod]
        public async Task RefreshRoutesAsync_DoesNotThrow()
        {
            var view = await CreateAndActivateView();
            var refreshMethod = typeof(DashboardView).GetMethod("RefreshRoutesAsync",
                System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);

            if (refreshMethod != null)
            {
                Func<Task> refreshAction = async () =>
                {
                    var task = refreshMethod.Invoke(view, null) as Task;
                    if (task != null)
                        await task;
                };

                await refreshAction.Should().NotThrowAsync("RefreshRoutesAsync should not throw exceptions");
            }
            else
            {
                Assert.Inconclusive("RefreshRoutesAsync method not found - may have different access modifier or name");
            }
        }

        [TestMethod]
        public async Task WithMockedRouteService_LoadsSuccessfully()
        {
            // Arrange
            _mockRouteService.Setup(rs => rs.GetRoutesAsync(It.IsAny<CancellationToken>()))
                .ReturnsAsync(new List<Route>
                {
                    new Route { Id = Guid.NewGuid(), Name = "Test Route 1", RouteCode = "TR1" },
                    new Route { Id = Guid.NewGuid(), Name = "Test Route 2", RouteCode = "TR2" }
                });

            var dashboardView = new DashboardView(_serviceProvider);

            // Act
            await dashboardView.OnActivateAsync(CancellationToken.None);

            // Assert
            dashboardView.Should().NotBeNull("DashboardView should load successfully with mocked route service");
            _mockRouteService.Verify(rs => rs.GetRoutesAsync(It.IsAny<CancellationToken>()), Times.AtLeastOnce,
                "Route service should be called during activation");
        }

        [TestMethod]
        public async Task ControlHierarchy_IsWellFormed()
        {
            var view = await CreateAndActivateView();

            var hierarchy = AnalyzeControlHierarchy(view);
            hierarchy.Should().NotBeEmpty("Control hierarchy should be analyzable");

            Action verify = () => VerifyNoCircularReferences(view);
            verify.Should().NotThrow("Control hierarchy should not have circular references");
        }

        [TestMethod]
        public async Task RoutesList_InitializedCorrectly()
        {
            // Setup mock to return test routes
            _mockRouteService.Setup(rs => rs.GetRoutesAsync(It.IsAny<CancellationToken>()))
                .ReturnsAsync(new List<Route>
                {
                    new Route { Id = Guid.NewGuid(), Name = "Test Route", RouteCode = "TR" }
                });

            var view = await CreateAndActivateView();

            // Look for routes list controls
            var routesList = FindControlsByName(view, "routesList").FirstOrDefault();
            if (routesList == null)
            {
                // Alternative search - look for TableLayoutPanel that might be the routes list
                var tableLayoutPanels = GetControlsOfType<TableLayoutPanel>(view);
                routesList = tableLayoutPanels.FirstOrDefault();
            }

            routesList.Should().NotBeNull("RoutesList should exist");

            // Check that no "Routes list control not found" error was logged
            var routesError = _logMessages.FirstOrDefault(m => m.Contains("Routes list control not found"));
            routesError.Should().BeNull("No 'Routes list control not found' warning should be logged");
        }

        [TestMethod]
        public async Task EmptyRoutes_DoesNotCrash()
        {
            // Setup mock to return empty routes list
            _mockRouteService.Setup(rs => rs.GetRoutesAsync(It.IsAny<CancellationToken>()))
                .ReturnsAsync(new List<Route>());

            var view = await CreateAndActivateView();

            // Verify view handles empty routes gracefully
            var routesList = FindControlsByName(view, "routesList").FirstOrDefault() ??
                             GetControlsOfType<TableLayoutPanel>(view).FirstOrDefault();
            routesList.Should().NotBeNull("RoutesList should exist even with empty data");

            // Test refresh with empty data
            await RefreshRoutesAsync(view).Should().NotThrowAsync("Refresh should handle empty routes gracefully");
        }

        [TestMethod]
        public async Task RapidRefresh_StressTest()
        {
            // Setup mock with test data
            _mockRouteService.Setup(rs => rs.GetRoutesAsync(It.IsAny<CancellationToken>()))
                .ReturnsAsync(new List<Route>
                {
                    new Route { Id = Guid.NewGuid(), Name = "Test Route", RouteCode = "TR" }
                });

            var view = await CreateAndActivateView();

            // Perform rapid refresh operations
            for (int i = 0; i < 50; i++)
            {
                await RefreshRoutesAsync(view).Should().NotThrowAsync($"Iteration {i} should not throw");
            }

            view.Controls.Count.Should().BeGreaterThan(0, "Controls should remain stable after rapid refresh");
        }

        [TestMethod]
        public async Task ConcurrentActivation_ThreadSafety()
        {
            var view = new DashboardView(_serviceProvider);

            // Attempt concurrent activations
            var tasks = Enumerable.Range(0, 10)
                .Select(_ => view.OnActivateAsync(CancellationToken.None))
                .ToArray();

            await Task.WhenAll(tasks).Should().NotThrowAsync("Concurrent activation should be thread-safe");

            view.Controls.Count.Should().BeGreaterThan(0, "View should be properly initialized after concurrent activation");

            var initLog = _logMessages.FirstOrDefault(m => m.Contains("initialization"));
            initLog.Should().NotBeNull("Initialization should be logged");
        }

        [TestMethod]
        public async Task Dispose_AfterActivation_NoException()
        {
            var view = await CreateAndActivateView();

            await InvokeOnUIThread(() =>
            {
                Action dispose = () => view.Dispose();
                dispose.Should().NotThrow("Dispose should not throw exceptions after activation");
            });

            view.IsDisposed.Should().BeTrue("View should be disposed");
        }

        [TestMethod]
        public async Task InvalidRouteData_HandlesGracefully()
        {
            // Setup mock to throw exception
            _mockRouteService.Setup(rs => rs.GetRoutesAsync(It.IsAny<CancellationToken>()))
                .ThrowsAsync(new Exception("Service error"));

            var view = await CreateAndActivateView();

            // Check that error was logged appropriately
            var errorLog = _logMessages.FirstOrDefault(m => m.Contains("service error", StringComparison.OrdinalIgnoreCase) ||
                                                           m.Contains("error", StringComparison.OrdinalIgnoreCase));
            errorLog.Should().NotBeNull("Service error should be logged");

            // View should remain functional despite error
            view.Controls.Count.Should().BeGreaterThan(0, "Controls should remain after service error");
        }

        #region Helper Methods

        private async Task<DashboardView> CreateAndActivateView()
        {
            DashboardView view = null;
            await InvokeOnUIThread(() => view = new DashboardView(_serviceProvider));
            await view.OnActivateAsync(CancellationToken.None);
            return view;
        }

        private async Task RefreshRoutesAsync(DashboardView view)
        {
            var method = typeof(DashboardView).GetMethod("RefreshRoutesAsync",
                System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
            if (method != null)
            {
                var task = method.Invoke(view, null) as Task;
                if (task != null)
                    await task;
            }
        }

        private static T GetField<T>(object obj, string fieldName)
        {
            var field = obj.GetType().GetField(fieldName,
                System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
            return (T)field?.GetValue(obj);
        }

        private static T[] GetControlsOfType<T>(Control parent) where T : Control
        {
            var controls = new List<T>();
            GetControlsOfTypeRecursive(parent, controls);
            return controls.ToArray();
        }

        private static void GetControlsOfTypeRecursive<T>(Control parent, List<T> result) where T : Control
        {
            foreach (Control control in parent.Controls)
            {
                if (control is T typedControl)
                    result.Add(typedControl);
                GetControlsOfTypeRecursive(control, result);
            }
        }

        private static Control[] FindControlsByName(Control parent, string nameContains)
        {
            var controls = new List<Control>();
            FindControlsByNameRecursive(parent, nameContains.ToLowerInvariant(), controls);
            return controls.ToArray();
        }

        private static void FindControlsByNameRecursive(Control parent, string nameContains, List<Control> result)
        {
            foreach (Control control in parent.Controls)
            {
                if (!string.IsNullOrEmpty(control.Name) &&
                    control.Name.ToLowerInvariant().Contains(nameContains, StringComparison.OrdinalIgnoreCase))
                    result.Add(control);
                FindControlsByNameRecursive(control, nameContains, result);
            }
        }

        private static Control[] FindControlsWithRoutesTag(Control parent)
        {
            var controls = new List<Control>();
            FindControlsWithRoutesTagRecursive(parent, controls);
            return controls.ToArray();
        }

        private static void FindControlsWithRoutesTagRecursive(Control parent, List<Control> result)
        {
            foreach (Control control in parent.Controls)
            {
                var tag = control.Tag?.ToString()?.ToLowerInvariant();
                if (!string.IsNullOrEmpty(tag) && (tag.Contains("route") || tag.Contains("routes")))
                    result.Add(control);
                FindControlsWithRoutesTagRecursive(control, result);
            }
        }

        private static Dictionary<string, int> AnalyzeControlHierarchy(Control parent)
        {
            var hierarchy = new Dictionary<string, int>();
            AnalyzeControlHierarchyRecursive(parent, hierarchy);
            return hierarchy;
        }

        private static void AnalyzeControlHierarchyRecursive(Control parent, Dictionary<string, int> hierarchy)
        {
            var typeName = parent.GetType().Name;
            hierarchy[typeName] = hierarchy.GetValueOrDefault(typeName, 0) + 1;
            foreach (Control child in parent.Controls)
                AnalyzeControlHierarchyRecursive(child, hierarchy);
        }

        private static void VerifyNoCircularReferences(Control parent)
        {
            var visited = new HashSet<Control>();
            VerifyNoCircularReferencesRecursive(parent, visited);
        }

        private static void VerifyNoCircularReferencesRecursive(Control current, HashSet<Control> visited)
        {
            if (visited.Contains(current))
                throw new InvalidOperationException($"Circular reference detected at {current.GetType().Name}");
            visited.Add(current);
            foreach (Control child in current.Controls)
                VerifyNoCircularReferencesRecursive(child, new HashSet<Control>(visited));
        }

        private static async Task InvokeOnUIThread(Action action) => await Task.Run(action);
        private static async Task InvokeOnUIThread(Func<Task> asyncAction) => await asyncAction();

        #endregion
    }
}
#pragma warning restore CA1416
